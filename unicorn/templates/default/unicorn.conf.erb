worker_processes <%= @worker_count %>
listen '<%= @socket_path %>', :backlog => <%= @backlog_limit %>
# listen '<%= @master_bind_address %>:<%= @master_bind_port %>'
timeout 60
pid "<%= @pid_path %>"

<% if @preload -%>
preload_app true
<% end -%>

before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = '<%= @pid_path %>.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end


after_fork do |server,worker|
  <% if @worker_listeners %>
  server.listen("<%= @worker_bind_address %>:#{<%= @worker_bind_base_port %> + worker.nr}") rescue nil
  <% end %>
end

stderr_path "<%= @log_path %>/unicorn.stderr.log"
stdout_path "<%= @log_path %>/unicorn.stdout.log"